/**
 * Owl Carousel v2.3.4
 * Copyright 2013-2018 David Deutsch
 * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE
 */

(function ($, window, document, undefined) {
  'use strict';

  var Owl = function (element, options) {
    var defaults = {
      items: 3,
      loop: false,
      center: false,
      rewind: false,
      checkVisibility: true,
      mouseDrag: true,
      touchDrag: true,
      pullDrag: true,
      freeDrag: false,
      margin: 0,
      stagePadding: 0,
      merge: false,
      mergeFit: true,
      autoWidth: false,
      startPosition: 0,
      rtl: false,
      smartSpeed: 250,
      fluidSpeed: false,
      dragEndSpeed: false,
      responsive: {},
      responsiveRefreshRate: 200,
      responsiveBaseElement: window,
      fallbackEasing: 'swing',
      slideTransition: '',
      info: false,
      nestedItemSelector: false,
      itemElement: 'div',
      stageElement: 'div',
      refreshClass: 'owl-refresh',
      loadedClass: 'owl-loaded',
      loadingClass: 'owl-loading',
      rtlClass: 'owl-rtl',
      responsiveClass: 'owl-responsive',
      dragClass: 'owl-drag',
      itemClass: 'owl-item',
      stageClass: 'owl-stage',
      stageOuterClass: 'owl-stage-outer',
      grabClass: 'owl-grab'
    };

    var plugin = this;

    plugin.$element = $(element);
    plugin._handlers = {};
    plugin._plugins = {};
    plugin._supress = {};
    plugin._current = null;
    plugin._speed = null;
    plugin._coordinates = [];
    plugin._breakpoint = null;
    plugin._width = null;
    plugin._items = [];
    plugin._clones = [];
    plugin._mergers = [];
    plugin._widths = [];
    plugin._invalidated = {
      width: true,
      items: true,
      position: true
    };
    plugin._pipe = [];
    plugin._drag = {
      time: null,
      target: null,
      pointer: null,
      stage: {
        start: null,
        current: null
      },
      direction: null
    };
    plugin._states = {
      current: {},
      tags: {
        initializing: ['busy'],
        animating: ['busy'],
        dragging: ['interacting']
      }
    };

    plugin.options = $.extend({}, defaults, options);

    plugin.enter('initializing');

    if (plugin.options.responsiveBaseElement !== window) {
      plugin.options.responsiveBaseElement = $(plugin.options.responsiveBaseElement);
    }

    plugin.viewport = function () {
      var width;

      if (plugin.options.responsiveBaseElement === window) {
        width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth;
      } else {
        width = plugin.options.responsiveBaseElement.width();
      }

      return width;
    };

    plugin.trigger = function (type, data) {
      var event = $.Event(type, data);

      plugin.$element.trigger(event);

      return event;
    };

    plugin.supress = function (type) {
      plugin._supress[type] = true;
    };

    plugin.release = function (type) {
      delete plugin._supress[type];
    };

    plugin.register = function (type, name, handler) {
      if (plugin._plugins[name] === undefined) {
        plugin._plugins[name] = [];
      }

      plugin._plugins[name].push({
        type: type,
        handler: handler
      });
    };

    plugin.events = function (event) {
      var handlers = plugin._plugins[event.type];

      if (handlers !== undefined) {
        handlers.forEach(function (handler) {
          handler.handler(event);
        });
      }
    };

    plugin.onTransitionEnd = function (event) {
      if (event !== undefined) {
        if (event.target !== undefined && event.target !== this) {
          return;
        }

        event.stopPropagation();
      }

      plugin.leave('animating');
      plugin.trigger('translated');
    };

    plugin.onThrottledResize = function () {
      clearTimeout(plugin.resizeTimer);
      plugin.resizeTimer = setTimeout(plugin._handlers.onResize, plugin.options.responsiveRefreshRate);
    };

    plugin.onResize = function () {
      if (plugin.isVisible()) {
        plugin.enter('resizing');
        plugin.trigger('resize').isDefaultPrevented() ? plugin.leave('resizing') : (
          plugin.invalidate('width'),
          plugin.refresh()
        );
        plugin.leave('resizing');
        plugin.trigger('resized');
      }
    };

    plugin.isVisible = function () {
      return plugin.options.checkVisibility ? plugin.$element.is(':visible') : true;
    };

    plugin.width = function (value) {
      if (value === undefined) {
        return plugin._width;
      }

      plugin._width = value;
    };

    plugin.invalidate = function (type) {
      if (type === undefined) {
        plugin._invalidated.width = true;
        plugin._invalidated.items = true;
        plugin._invalidated.position = true;
      } else {
        plugin._invalidated[type] = true;
      }
    };

    plugin.reset = function (index) {
      plugin._speed = 0;
      plugin
