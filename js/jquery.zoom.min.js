;(function (o) {
  'use strict';

  // Default settings
  const defaultSettings = {
    url: false,
    callback: false,
    target: false,
    duration: 120,
    on: 'mouseover',
    touch: true,
    onZoomIn: false,
    onZoomOut: false,
    magnify: 1,
  };

  // Zoom plugin
  o.zoom = function (target, element, img, settings) {
    // Merge default and user-provided settings
    settings = o.extend({}, defaultSettings, settings || {});

    // Get the required elements
    const container = o(target);
    const imgContainer = o(element);
    const imgElement = o(img);

    // Set the initial position and size of the image container
    imgContainer.css({
      position: 'absolute',
      top: 0,
      left: 0,
      opacity: 0,
      width: img.width * settings.magnify,
      height: img.height * settings.magnify,
      border: 'none',
      maxWidth: 'none',
      maxHeight: 'none',
    }).appendTo(target);

    // Initialize the zoom functionality
    const init = function () {
      const containerWidth = container.outerWidth();
      const containerHeight = container.outerHeight();
      const imgWidth = imgContainer.outerWidth();
      const imgHeight = imgContainer.outerHeight();
      const scaleX = (imgWidth - containerWidth) / containerWidth;
      const scaleY = (imgHeight - containerHeight) / containerHeight;

      // Set the initial position of the image container
      imgContainer.css({
        left: 0,
        top: 0,
      });

      // Handle mouse/touch events
      container.on('mousemove.zoom', handleMove);

      // If touch events are supported, handle them as well
      if (settings.touch) {
        container.on('touchstart.zoom', handleTouchStart);
        container.on('touchmove.zoom', handleTouchMove);
        container.on('touchend.zoom', handleTouchEnd);
      }
    };

    // Handle mouse/touch move events
    const handleMove = function (event) {
      const containerWidth = container.outerWidth();
      const containerHeight = container.outerHeight();
      const imgWidth = imgContainer.outerWidth();
      const imgHeight = imgContainer.outerHeight();
      const scaleX = (imgWidth - containerWidth) / containerWidth;
      const scaleY = (imgHeight - containerHeight) / containerHeight;
      const pageX = 'pageX' in event ? event.pageX : event.originalEvent.touches[0].pageX;
      const pageY = 'pageY' in event ? event.pageY : event.originalEvent.touches[0].pageY;

      // Calculate the new position of the image container
      const newLeft = Math.max(Math.min(pageX - containerWidth / 2, imgWidth - containerWidth), 0) * -scaleX;
      const newTop = Math.max(Math.min(pageY - containerHeight / 2, imgHeight - containerHeight), 0) * -scaleY;

      // Update the position of the image container
      imgContainer.css({
        left: newLeft,
        top: newTop,
      });
    };

    // Handle touch start events
    const handleTouchStart = function (event) {
      event.preventDefault();

      // Check if the user is trying to zoom in or out
      if (settings.on === 'grab') {
        container.on('mousedown.zoom', handleMouseDown);
      } else if (settings.on === 'click') {
        container.on('click.zoom', handleClick);
      } else if (settings.on === 'toggle') {
        container.on('click.zoom', handleToggle);
      } else if (settings.on === 'mouseover') {
        init();
        container.on('mouseenter.zoom', handleMove);
        container.on('mouseleave.zoom', handleMouseLeave);
      }
    };

    // Handle touch move events
    const handleTouchMove = function (event) {
      event.preventDefault();
      handleMove(event);

