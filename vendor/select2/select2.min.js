/*! Select2 4.0.3 | https://github.com/select2/select2/blob/master/LICENSE.md */
(function ($, undefined) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var Utils = $.fn.select2.amd.require('select2/utils');
  var $ = $.fn.select2.amd.require('jquery');

  var BaseSelection = _createClass(function BaseSelection(decorated, $element, options) {
    _classCallCheck(this, BaseSelection);

    this.$element = $element;
    this.options = options;
    this.decorated = decorated;
  });

  BaseSelection.prototype.bind = function bind(container, ...args) {
    this.decorated.bind(container, ...args);
    container.on('selection:update', $.proxy(this.update, this));
  };

  BaseSelection.prototype.update = function update(params) {
    throw new Error('The `update` method must be defined in child classes.');
  };

  var SingleSelection = _createClass(function SingleSelection(decorated, $element, options) {
    _classCallCheck(this, SingleSelection);

    return BaseSelection.call(this, decorated, $element, options);
  });

  Utils.Extend(SingleSelection, BaseSelection);

  SingleSelection.prototype.update = function update(params) {
    if (params.length === 0) {
      this.$element.empty();
    } else {
      var $option = $(document.createElement('option')).prop({
        selected: true,
        value: params[0].id,
        text: params[0].text,
        title: params[0].title
      });

      this.$element.empty().append($option);
    }
  };

  var MultipleSelection = _createClass(function MultipleSelection(decorated, $element, options) {
    _classCallCheck(this, MultipleSelection);

    return BaseSelection.call(this, decorated, $element, options);
  });

  Utils.Extend(MultipleSelection, BaseSelection);

  MultipleSelection.prototype.update = function update(params) {
    if (params.length === 0) {
      this.$element.empty();
    } else {
      var $options = params.map(function (param) {
        return $(document.createElement('option')).prop({
          selected: param.selected,
          value: param.id,
          text: param.text,
          title: param.title
        });
      });

      this.$element.empty().append($options);
    }
  };

  $.fn.select2.amd.define('select2/selection/base', [], function () {
    return BaseSelection;
  });

  $.fn.select2.amd.define('select2/selection/single', ['select2/selection/base'], function (BaseSelection) {
    return SingleSelection;
  });

  $.fn.select2.amd.define('select2/selection/multiple', ['select2/selection/base'], function (BaseSelection) {
    return MultipleSelection;
  });

})(window.jQuery);
