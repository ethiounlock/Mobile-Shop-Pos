/**
 * Owl Carousel v2.3.4
 * Copyright 2013-2018 David Deutsch
 * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE
 */

(function ($, window, document, undefined) {
  'use strict';

  var Owl = function (element, options) {
    var defaults = {
      items: 3,
      loop: false,
      center: false,
      rewind: false,
      checkVisibility: true,
      mouseDrag: true,
      touchDrag: true,
      pullDrag: true,
      freeDrag: false,
      margin: 0,
      stagePadding: 0,
      merge: false,
      mergeFit: true,
      autoWidth: false,
      startPosition: 0,
      rtl: false,
      smartSpeed: 250,
      fluidSpeed: false,
      dragEndSpeed: false,
      responsive: {},
      responsiveRefreshRate: 200,
      responsiveBaseElement: window,
      fallbackEasing: 'swing',
      slideTransition: '',
      info: false,
      nestedItemSelector: false,
      itemElement: 'div',
      stageElement: 'div',
      refreshClass: 'owl-refresh',
      loadedClass: 'owl-loaded',
      loadingClass: 'owl-loading',
      rtlClass: 'owl-rtl',
      responsiveClass: 'owl-responsive',
      dragClass: 'owl-drag',
      itemClass: 'owl-item',
      stageClass: 'owl-stage',
      stageOuterClass: 'owl-stage-outer',
      grabClass: 'owl-grab'
    };

    var plugin = this;

    plugin.$element = $(element);
    plugin._handlers = {};
    plugin._plugins = {};
    plugin._supress = {};
    plugin._current = null;
    plugin._speed = null;
    plugin._coordinates = [];
    plugin._breakpoint = null;
    plugin._width = null;
    plugin._items = [];
    plugin._clones = [];
    plugin._mergers = [];
    plugin._widths = [];
    plugin._invalidated = {
      width: true,
      items: true,
      position: true
    };
    plugin._pipe = [];
    plugin._drag = {
      time: null,
      target: null,
      pointer: null,
      stage: {
        start: null,
        current: null
      },
      direction: null
    };
    plugin._states = {
      current: {},
      tags: {
        initializing: ['busy'],
        animating: ['busy'],
        dragging: ['interacting']
      }
    };

    plugin.options = $.extend({}, defaults, options);

    plugin.enter('initializing');

    plugin.trigger('initialize');

    plugin.setup();

    plugin.initialize();

    plugin.trigger('initialized');

    plugin.leave('initializing');
  };

  Owl.prototype.setup = function () {
    this.enter('setting');

    this.trigger('setup');

    this.optionsLogic();

    this.$element.toggleClass(this.options.rtlClass, this.options.rtl);

    this.initializeStage();

    this.initializeItems();

    this.registerEventHandlers();

    this.leave('setting');

    this.trigger('setup');
  };

  Owl.prototype.initializeStage = function () {
    this.$stage = this.$element.find("." + this.options.stageClass);

    if (this.$stage.length) {
      return;
    }

    this.$element.addClass(this.options.loadingClass);

    this.$stage = $("<" + this.options.stageElement + ">", {
      class: this.options.stageClass
    }).wrap("<div class='" + this.options.stageOuterClass + "' />");

    this.$element.append(this.$stage.parent());
  };

  Owl.prototype.initializeItems = function () {
    var items = this.$element.find(".owl-item");

    if (items.length) {
      this._items = items.get().map(function (item) {
        return $(item);
      });

      this._mergers = this._items.map(function () {
        return 1;
      });

      this.refresh();

      return;
    }

    this.replace(this.$element.children().not(this.$stage.parent()));

    this.isVisible() ? this.refresh() : this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass);
  };

  Owl.prototype.initialize = function () {
    this.enter('initializing');

    this.trigger('initialize');

    this.options.autoWidth && !this.is('pre-loading') ? this.preloadAutoWidthImages(this.$element.find('img')) : null;

    this.initializeStage();

    this.initializeItems();

    this.registerEventHandlers();

    this.leave('initializing');

    this.trigger('initialized');
  };

  Owl.prototype.isVisible = function () {
    return !this.options.checkVisibility || this.$element.is(':visible');
  };

  Owl.prototype.registerEventHandlers = function () {
    var plugin = this;

    if ($.support.transition) {
      this.$stage.on($.support.transition.end + ".owl.core", function (event) {
        plugin.onTransitionEnd(event);
      });
    }

    if (this.options.responsive) {
      $(window).on('resize.' + this.options.responsiveClass, $.proxy(this.onThrottledResize, this));
    }

    if (this.options.mouseDrag) {
      this.$stage.on("mousedown.owl.core", $.proxy
