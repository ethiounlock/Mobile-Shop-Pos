(function ($) {
    'use strict';

    // Check if a string matches a date format
    function isDate(str) {
        if (str instanceof Date) return str;
        if (typeof str !== 'string') return;

        var matchesDatePattern = String(str).match(datePattern);
        if (matchesDatePattern) {
            str = String(str).match(/^[0-9]*$/) || Number(str);
            str = String(str).match(/\-/) ? String(str).replace(/\-/g, "/") : str;
            return new Date(str);
        }

        throw new Error("Couldn't cast `" + str + "` to a date object.");
    }

    // Regular expression for date patterns
    var datePattern = /^[0-9]*$/.source +
                      /([0-9]{1,2}\/){2}[0-9]{4}( [0-9]{1,2}(:[0-9]{2}){2})?/.source +
                      /[0-9]{4}([\/\-][0-9]{1,2}){2}( [0-9]{1,2}(:[0-9]{2}){2})?/.source;
    datePattern = new RegExp(datePattern);

    // Countdown settings
    var settings = {
        precision: 100,
        elapse: false,
        defer: false
    };

    // Supported time units
    var timeUnits = {
        years: 'years',
        m: 'months',
        n: 'daysToMonth',
        d: 'daysToWeek',
        w: 'weeks',
        W: 'weeksToMonth',
        H: 'hours',
        M: 'minutes',
        S: 'seconds',
        D: 'totalDays',
        I: 'totalHours',
        N: 'totalMinutes',
        T: 'totalSeconds'
    };

    // Countdown class
    function Countdown(element, finalDate, options) {
        this.el = element;
        this.$el = $(element);
        this.interval = null;
        this.options = $.extend({}, settings, options);
        this.finalDate = finalDate;
        this.instanceNumber = countdowns.length;
        countdowns.push(this);
        this.$el.data('countdown-instance', this.instanceNumber);

        if (options && typeof options.onUpdate === 'function') {
            this.$el.on('update.countdown', options.onUpdate);
            this.$el.on('stoped.countdown', options.onUpdate);
            this.$el.on('finish.countdown', options.onUpdate);
        }

        this.setFinalDate(finalDate);
        this.options.defer === false && this.start();
    }

    // Countdown prototype
    Countdown.prototype = {
        start: function () {
            if (this.interval) clearInterval(this.interval);
            var that = this;
            this.update();
            this.interval = setInterval(function () {
                that.update.call(that);
            }, this.options.precision);
        },

        stop: function () {
            clearInterval(this.interval);
            this.interval = null;
            this.$el.trigger('stoped.countdown');
        },

        toggle: function () {
            this.interval ? this.stop() : this.start();
        },

        pause: function () {
            this.stop();
        },

        resume: function () {
            this.start();
        },

        remove: function () {
            this.stop();
            countdowns[this.instanceNumber] = null;
            delete this.$el.data().countdownInstance;
        },

        setFinalDate: function (finalDate) {
            this.finalDate = isDate(finalDate);
        },

        update: function () {
            if (!this.$el.closest('html').length) return this.remove();

            var now = new Date();
            var timeLeft = Math.ceil((this.finalDate.getTime() - now.getTime()) / 1000);
            timeLeft = this.options.elapse ? timeLeft : Math.abs(timeLeft);

            if (this.totalSecsLeft === timeLeft || this.firstTick) {
                this.firstTick = false;
            } else {
                this.totalSecsLeft = timeLeft;
                this.elapsed = now >= this.finalDate;
            }

            this.offset = {
                seconds: this.totalSecsLeft % 60,
                minutes: Math.floor(this.totalSecsLeft / 60) % 60,
                hours: Math.floor(this.totalSecsLeft / 60 / 60) % 24,
                days: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
                daysToWeek: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
                daysToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 30.4368,
                weeks: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7),
                weeksToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7) % 4,
                months: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 30.4368),
                years: Math.abs(this.finalDate.getFullYear() - now.getFullYear()),
                totalDays: Math.floor(this.totalSecsLeft / 60 / 60 / 24),
                totalHours: Math.floor(this.totalSecsLeft / 60 / 6
